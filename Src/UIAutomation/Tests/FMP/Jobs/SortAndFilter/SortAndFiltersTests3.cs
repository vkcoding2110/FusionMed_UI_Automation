using System.Collections.Generic;using System.Linq;using Microsoft.VisualStudio.TestTools.UnitTesting;using UIAutomation.DataFactory.FMP.Jobs;using UIAutomation.PageObjects.FMP.BrowseAll;using UIAutomation.PageObjects.FMP.Jobs;using UIAutomation.Utilities;namespace UIAutomation.Tests.FMP.Jobs.SortAndFilter{    [TestClass]    [TestCategory("Jobs"), TestCategory("FMP")]    public class SortAndFiltersTests3 : FmpBaseTest    {        public static readonly DataObjects.FMP.Jobs.SortAndFilter SortAndFilterDetail = SortAndFilterDataFactory.SortAndFilterDetails();        private readonly List<string> CategoryOption = SortAndFilterDetail.Category;        private readonly List<string> SpecialtyOption = SortAndFilterDetail.Specialty;        [TestMethod]        [TestCategory("MobileReady")]        public void SortAndFilter_VerifyStartDateWorkSuccessfully()        {            var exploreMenu = new ExploreMenuPo(Driver);            var searchJobs = new SearchPo(Driver);            var sortAndFilter = new SortAndFilterPo(Driver);            var startDate = SortAndFilterDetail.StartDate;            Log.Info($"Step 1: Navigate to application at: {FusionMarketPlaceUrl}");            Driver.NavigateTo(FusionMarketPlaceUrl);            Log.Info("Step 2: Click on 'View All Jobs', click on 'Sort & Filter' button");            exploreMenu.ClickOnViewAllJobsLinkText(FmpConstants.JobsText);            searchJobs.ClickOnSortAndFilterButton();            Log.Info("Step 3: Click on 'Start Date' option, Click on 'Start ASAP' checkbox & verify 'Start Date' Input is disabled");            const string filterOption = "Start Date";            sortAndFilter.ClickOnSortAndFilterOption(filterOption);            sortAndFilter.ClickOnSortAndFilterStartASAPCheckbox();            Assert.IsFalse(sortAndFilter.IsStartDateInputEnabled(), "The 'Start Date' Input is not disabled");            Log.Info($"Step 4: Click on 'Start Date' checkbox & enter '{startDate}' date");            sortAndFilter.ClickOnSortAndFilterStartASAPCheckbox();            sortAndFilter.ClickOnSortAndFilterStartDateButton();            sortAndFilter.EnterStartDate(startDate.ToString("MM/dd/yyyy"));            sortAndFilter.ClickOnBackButton();            Assert.IsTrue(sortAndFilter.IsStartDateTextPresentOnFilterTag(), "Selected 'Start Date' is not present on search result page");            Log.Info("Step 5: Verify Selected Sort by option is visible on filtered tag");            sortAndFilter.ClickOnShowAllResultsButton();            var expectedStartDate = "Starting: " + startDate.ToString("MMMM d, yyyy");            var actualSelectedJobTypeList = sortAndFilter.GetSelectedJobCategoryList();            Assert.IsTrue(actualSelectedJobTypeList.Contains(expectedStartDate), $" Start Date - {expectedStartDate} is not present on applied filter");        }        [TestMethod]        [TestCategory("MobileReady")]        public void SortAndFilter_VerifyStartDateValidationMessage()        {            var exploreMenu = new ExploreMenuPo(Driver);            var searchJobs = new SearchPo(Driver);            var sortAndFilter = new SortAndFilterPo(Driver);            Log.Info($"Step 1: Navigate to application at: {FusionMarketPlaceUrl}");            Driver.NavigateTo(FusionMarketPlaceUrl);            Log.Info("Step 2: Click on 'View All Jobs', click on 'Sort & Filter' button");            exploreMenu.ClickOnViewAllJobsLinkText(FmpConstants.JobsText);            searchJobs.ClickOnSortAndFilterButton();            Log.Info("Step 3: Click on 'Start Date' option");            const string filterOption = "Start Date";            sortAndFilter.ClickOnSortAndFilterOption(filterOption);            Log.Info("Step 4: Enter invalid 'Start Date'");            sortAndFilter.ClickOnSortAndFilterStartDateButton();            const string startDate = "55552021";            sortAndFilter.EnterStartDate(startDate);            const string expectedValidationMessage = "Invalid Date Format";            Assert.AreEqual(expectedValidationMessage, sortAndFilter.GetStartDateValidationMessage(), "validation message does not displayed");        }        [TestMethod]        [TestCategory("MobileReady")]        public void SortAndFilter_VerifyJobTypeSuccessfully()        {            var exploreMenu = new ExploreMenuPo(Driver);            var searchJobs = new SearchPo(Driver);            var sortAndFilter = new SortAndFilterPo(Driver);            var jobTypeOption = SortAndFilterDetail.JobType;            Log.Info($"Step 1: Navigate to application at: {FusionMarketPlaceUrl}");            Driver.NavigateTo(FusionMarketPlaceUrl);            Log.Info("Step 2: Click on 'View All Jobs', click on 'Sort & Filter' button");            exploreMenu.ClickOnViewAllJobsLinkText(FmpConstants.JobsText);            searchJobs.ClickOnSortAndFilterButton();            Log.Info($"Step 3: Click on 'Job Type' option , select '{jobTypeOption}' & click on back button");            const string filterOption = "Job Type";            sortAndFilter.ClickOnSortAndFilterOption(filterOption);            sortAndFilter.ClickOnSortAndFilterSubMenuOption(jobTypeOption);            sortAndFilter.ClickOnBackButton();            Assert.AreEqual(jobTypeOption, sortAndFilter.GetJobTypeInputValue().FirstOrDefault(), "The job type value doesn't selected");            Log.Info("Step 4: click on 'Show All Results' button , verify selected Job Type is shown on each job card header");            sortAndFilter.ClickOnShowAllResultsButton();            var actualSelectedJobTypeList = sortAndFilter.GetSelectedJobCategoryList();            foreach (var job in actualSelectedJobTypeList)            {                Assert.IsTrue(jobTypeOption.Contains(job), $"{job} Job type filter tag is not present");            }        }        [TestMethod]        [TestCategory("Smoke")]        public void SortAndFilter_VerifySelectingMultipleCategoryAndSpecialtyFromJobsPageWorkSuccessfully()        {            var exploreMenu = new ExploreMenuPo(Driver);            var searchJobs = new SearchPo(Driver);            var sortAndFilter = new SortAndFilterPo(Driver);            Log.Info($"Step 1: Navigate to application at: {FusionMarketPlaceUrl}");            Driver.NavigateTo(FusionMarketPlaceUrl);            Log.Info("Step 2: Click on 'View All Jobs'");            exploreMenu.ClickOnViewAllJobsLinkText(FmpConstants.JobsText);            Log.Info($"Step 3: Click on 'Category' & select '{CategoryOption}' & '{CategoryOption}'");            searchJobs.ClickOnCategoryDropDown();            searchJobs.SelectCategoryAndSpecialtyOptions(CategoryOption);            Log.Info($"Step 4: Click on 'Specialty' & select '{SpecialtyOption}' & '{SpecialtyOption}'");            searchJobs.ClickOnSpecialtyDropDown();            searchJobs.SelectCategoryAndSpecialtyOptions(SpecialtyOption);            Log.Info("Step 5: Verify selected Category And Specialty on search result page");            searchJobs.WaitUntilJobCardVisible();            var actualSearchCriteria = searchJobs.GetSearchPageCriteria();            string[] resultPageJobs = { "Jobs" };            var expectedSearchCriteria = resultPageJobs.Concat(CategoryOption).Concat(SpecialtyOption).ToList();            CollectionAssert.AreEquivalent(expectedSearchCriteria.ToList(), actualSearchCriteria.ToList(), "Category & Specialty are not matched");            Log.Info("Step 6: Verify selected Category And Specialty on filtered popup");            searchJobs.ClickOnSortAndFilterButton();            var selectedCategories = sortAndFilter.GetSelectedCategories();            var selectedSpecialty = sortAndFilter.GetSelectedSpecialties();            var actualCategoriesList = selectedCategories.Split(", ");            var actualSpecialtyList = selectedSpecialty.Split(", ");            CollectionAssert.AreEquivalent(CategoryOption.ToList(), actualCategoriesList.ToList(), "Category list is not matched");            CollectionAssert.AreEquivalent(SpecialtyOption.ToList(), actualSpecialtyList.ToList(), "Specialty list is not matched");        }        [TestMethod]        [TestCategory("MobileReady")]        public void SortAndFilter_VerifySelectingMultipleCategoryAndSpecialtyFromFilterPopUpWorkSuccessfully()        {            var exploreMenu = new ExploreMenuPo(Driver);            var searchJobs = new SearchPo(Driver);            var sortAndFilter = new SortAndFilterPo(Driver);            Log.Info($"Step 1: Navigate to application at: {FusionMarketPlaceUrl}");            Driver.NavigateTo(FusionMarketPlaceUrl);            Log.Info("Step 2: Click on 'View All Jobs', click on 'Sort & Filter' button");            exploreMenu.ClickOnViewAllJobsLinkText(FmpConstants.JobsText);            searchJobs.ClickOnSortAndFilterButton();            Log.Info($"Step 3: Click on 'Category' option, select '{CategoryOption}' & '{CategoryOption}' & click on back button");            const string filterOption = "Category";            sortAndFilter.ClickOnSortAndFilterOption(filterOption);            sortAndFilter.SelectSubOptionCheckboxFromFilter(CategoryOption);            sortAndFilter.ClickOnBackButton();            var actualSelectedCategories = sortAndFilter.GetSelectedCategories();            foreach (var list in CategoryOption)            {                Assert.IsTrue(actualSelectedCategories.Contains(list), "Category is not matched");            }            Log.Info($"Step 4: Click on 'Specialty' option ,select '{SpecialtyOption}' & '{SpecialtyOption}' & click on back button");            const string specialtyFilterOption = "Specialty";            sortAndFilter.ClickOnSortAndFilterOption(specialtyFilterOption);            sortAndFilter.SelectSubOptionCheckboxFromFilter(SpecialtyOption);            sortAndFilter.ClickOnBackButton();            var actualSelectedSpecialty = sortAndFilter.GetSelectedSpecialties();            foreach (var list in SpecialtyOption)            {                Assert.IsTrue(actualSelectedSpecialty.Contains(list), "Specialty is not matched");            }            Log.Info("Step 5: Verify selected Category And Specialty on search result page");            sortAndFilter.ClickOnShowAllResultsButton();            searchJobs.WaitUntilJobCardVisible();            var actualSearchCriteria = searchJobs.GetSearchPageCriteria();            string[] jobsResult = { "Jobs" };            var expectedSearchCriteria = SpecialtyOption.Concat(CategoryOption).Concat(jobsResult).ToList();            CollectionAssert.AreEquivalent(expectedSearchCriteria.ToList(), actualSearchCriteria.ToList(), "Category & Specialty are not matched");        }    }}